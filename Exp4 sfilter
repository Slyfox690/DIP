import cv2
import numpy as np
from matplotlib import pyplot as plt

# Load the grayscale image and convert to float64 for computation
F = cv2.imread(r"/content/cameraman.jpg", cv2.IMREAD_GRAYSCALE)

if F is None:
    raise FileNotFoundError("Image not found. Please check the path and filename.")

F = F.astype(np.float64)

# Get image dimensions
rows, cols = F.shape

# Define smoothing kernels
A = np.array([[1, 1, 1],
              [1, 1, 1],
              [1, 1, 1]], dtype=np.float64)  # Mean Filter Kernel

B = np.array([[1, 2, 1],
              [2, 4, 2],
              [1, 2, 1]], dtype=np.float64)  # Gaussian Filter Kernel

# Output image placeholders
H = np.copy(F)
I = np.copy(F)

# Apply filters manually (without using cv2.filter2D)
for i in range(1, rows - 1):
    for j in range(1, cols - 1):
        region = F[i - 1:i + 2, j - 1:j + 2]

        # Non-weighted (mean) filter
        H[i, j] = np.sum(region * A) / np.sum(A)

        # Weighted (Gaussian-like) filter
        I[i, j] = np.sum(region * B) / np.sum(B)

# Convert output images to uint8 for display
H = np.uint8(np.round(H))
I = np.uint8(np.round(I))

# Plotting the results
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(F.astype(np.uint8), cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 3, 2)
plt.imshow(H, cmap='gray')
plt.title('Smoothed Image\nNon-weighted Kernel (Mean Filter)')
plt.axis('off')

plt.subplot(1, 3, 3)
plt.imshow(I, cmap='gray')
plt.title('Smoothed Image\nWeighted Kernel (Gaussian Filter)')
plt.axis('off')
plt.tight_layout()
plt.show()
