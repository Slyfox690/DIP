import cv2
import numpy as np
import matplotlib.pyplot as plt
aa = cv2.imread(cv2.samples.findFile(r"/content/Screenshot (2).png"), cv2.IMREAD_GRAYSCALE)
if aa is None:
    raise FileNotFoundError("Image not found. Ensure 'cameraman.tif' is available.")
plt.subplot(2, 2, 1)
plt.imshow(aa, cmap='gray')
plt.title('Original Image')

a = aa.astype(float)
row, col = a.shape

# Sobel masks
w1 = np.array([[-1, -2, -1],
               [ 0,  0,  0],
               [ 1,  2,  1]])
w2 = np.array([[-1, 0, 1],
               [-2, 0, 2],
               [-1, 0, 1]])

# Initialize result matrices
a1 = np.zeros((row, col))
a2 = np.zeros((row, col))

# Manual convolution
for x in range(1, row - 1):
    for y in range(1, col - 1):
        region = a[x - 1:x + 2, y - 1:y + 2]
        a1[x, y] = np.sum(w1 * region)
        a2[x, y] = np.sum(w2 * region)

a3 = a1 + a2

# Display results
plt.subplot(2, 2, 2)
plt.imshow(np.uint8(np.clip(a1, 0, 255)), cmap='gray')
plt.title('x-gradient image')

plt.subplot(2, 2, 3)
plt.imshow(np.uint8(np.clip(a2, 0, 255)), cmap='gray')
plt.title('y-gradient image')

plt.subplot(2, 2, 4)
plt.imshow(np.uint8(np.clip(a3, 0, 255)), cmap='gray')
plt.title('Output Image (Sobel Mask)')

plt.tight_layout()
plt.show()
